// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace WouterFennis.ChatApp.FrontEnd.Agents
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ChatRoomBackendServiceAgent.
    /// </summary>
    public static partial class ChatRoomBackendServiceAgentExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAllChatRooms(this IChatRoomBackendServiceAgent operations)
            {
                return Task.Factory.StartNew(s => ((IChatRoomBackendServiceAgent)s).GetAllChatRoomsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllChatRoomsAsync(this IChatRoomBackendServiceAgent operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllChatRoomsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatRoom'>
            /// </param>
            public static object AddChatRoom(this IChatRoomBackendServiceAgent operations, ChatRoom chatRoom = default(ChatRoom))
            {
                return Task.Factory.StartNew(s => ((IChatRoomBackendServiceAgent)s).AddChatRoomAsync(chatRoom), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatRoom'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddChatRoomAsync(this IChatRoomBackendServiceAgent operations, ChatRoom chatRoom = default(ChatRoom), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddChatRoomWithHttpMessagesAsync(chatRoom, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatRoomId'>
            /// </param>
            public static object GetChatRoomById(this IChatRoomBackendServiceAgent operations, long chatRoomId)
            {
                return Task.Factory.StartNew(s => ((IChatRoomBackendServiceAgent)s).GetChatRoomByIdAsync(chatRoomId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatRoomId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetChatRoomByIdAsync(this IChatRoomBackendServiceAgent operations, long chatRoomId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChatRoomByIdWithHttpMessagesAsync(chatRoomId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatRoomId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            public static object AddMessageToChatRoom(this IChatRoomBackendServiceAgent operations, long chatRoomId, Message message = default(Message))
            {
                return Task.Factory.StartNew(s => ((IChatRoomBackendServiceAgent)s).AddMessageToChatRoomAsync(chatRoomId, message), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatRoomId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddMessageToChatRoomAsync(this IChatRoomBackendServiceAgent operations, long chatRoomId, Message message = default(Message), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddMessageToChatRoomWithHttpMessagesAsync(chatRoomId, message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
